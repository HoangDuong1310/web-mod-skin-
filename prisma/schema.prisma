generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextIndex", "fullTextSearch"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId], map: "accounts_userId_fkey")
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId], map: "sessions_userId_fkey")
  @@map("sessions")
}

model User {
  id                String            @id @default(cuid())
  name              String?
  email             String            @unique
  emailVerified     DateTime?
  image             String?
  role              Role              @default(USER)
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  deletedAt         DateTime?
  password          String?
  passwordUpdatedAt DateTime?
  accounts          Account[]
  auditLogs         AuditLog[]
  downloads         Download[]
  notifications     notifications[]
  passwordHistory   PasswordHistory[]
  posts             Post[]
  reviews           Review[]
  sessions          Session[]
  donations         Donation[]
  donationGoals     DonationGoal[]

  @@index([email])
  @@index([createdAt])
  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Category {
  id              String     @id @default(cuid())
  name            String
  slug            String     @unique
  description     String?    @db.Text
  image           String?
  parentId        String?
  status          Status     @default(PUBLISHED)
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt
  deletedAt       DateTime?
  metaTitle       String?
  metaDescription String?    @db.Text
  parent          Category?  @relation("CategoryParent", fields: [parentId], references: [id])
  children        Category[] @relation("CategoryParent")
  products        Product[]

  @@index([slug])
  @@index([parentId])
  @@index([status])
  @@index([createdAt])
  @@map("categories")
}

model Product {
  id              String     @id @default(cuid())
  title           String
  slug            String     @unique
  description     String?    @db.Text
  content         String?    @db.Text
  status          Status     @default(DRAFT)
  price           Decimal    @db.Decimal(10, 2)
  comparePrice    Decimal?   @db.Decimal(10, 2)
  stock           Int        @default(0)
  images          String?    @db.LongText
  categoryId      String?
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt
  deletedAt       DateTime?
  metaTitle       String?
  metaDescription String?    @db.Text
  averageRating   Decimal    @default(0.00) @db.Decimal(3, 2)
  totalReviews    Int        @default(0)
  version         String?
  downloadUrl     String?
  externalUrl     String?
  fileSize        String?
  filename        String?
  downloads       Download[]
  category        Category?  @relation(fields: [categoryId], references: [id])
  reviews         Review[]

  @@index([slug])
  @@index([categoryId])
  @@index([status])
  @@index([price])
  @@index([createdAt])
  @@index([averageRating])
  @@fulltext([title, description])
  @@map("products")
}

model Download {
  id         String   @id @default(cuid())
  userId     String?
  productId  String
  downloadIp String?
  userAgent  String?
  createdAt  DateTime @default(now())
  product    Product  @relation(fields: [productId], references: [id])
  user       User?    @relation(fields: [userId], references: [id])

  @@index([userId, createdAt])
  @@index([productId, createdAt])
  @@index([createdAt])
  @@map("downloads")
}

model Post {
  id              String    @id @default(cuid())
  title           String
  slug            String    @unique
  excerpt         String?   @db.Text
  content         String    @db.Text
  status          Status    @default(DRAFT)
  featured        Boolean   @default(false)
  authorId        String
  publishedAt     DateTime?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  deletedAt       DateTime?
  metaTitle       String?
  metaDescription String?   @db.Text
  featuredImage   String?
  postTags        PostTag[]
  author          User      @relation(fields: [authorId], references: [id])

  @@index([slug])
  @@index([authorId])
  @@index([status])
  @@index([publishedAt])
  @@index([createdAt])
  @@fulltext([title, excerpt, content])
  @@map("posts")
}

model Tag {
  id          String    @id @default(cuid())
  name        String    @unique
  slug        String    @unique
  description String?   @db.Text
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime?
  postTags    PostTag[]

  @@index([slug])
  @@map("tags")
}

model PostTag {
  id     String @id @default(cuid())
  postId String
  tagId  String
  post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)
  tag    Tag    @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@unique([postId, tagId])
  @@index([tagId], map: "post_tags_tagId_fkey")
  @@map("post_tags")
}

model Review {
  id         String    @id @default(cuid())
  productId  String
  rating     Int
  title      String
  content    String    @db.Text
  userId     String?
  guestName  String?
  guestEmail String?
  isVerified Boolean   @default(false)
  isVisible  Boolean   @default(true)
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  deletedAt  DateTime?
  product    Product   @relation(fields: [productId], references: [id], onDelete: Cascade)
  user       User?     @relation(fields: [userId], references: [id])

  @@index([productId, createdAt])
  @@index([userId])
  @@index([rating])
  @@index([isVisible, isVerified])
  @@map("reviews")
}

model Setting {
  id        String   @id @default(cuid())
  key       String   @unique
  value     String?  @db.Text
  category  String
  isPublic  Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([category])
  @@index([key, category])
  @@map("settings")
}

model PasswordHistory {
  id           String   @id @default(cuid())
  userId       String
  passwordHash String
  createdAt    DateTime @default(now())
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, createdAt])
  @@map("password_history")
}

model AccountLockout {
  id          String   @id @default(cuid())
  identifier  String   @unique
  lockedUntil DateTime
  reason      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([identifier])
  @@index([lockedUntil])
  @@map("account_lockouts")
}

model FailedLoginAttempts {
  id          String   @id @default(cuid())
  identifier  String   @unique
  attempts    Int      @default(1)
  lastAttempt DateTime @default(now())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([identifier])
  @@index([lastAttempt])
  @@map("failed_login_attempts")
}

model AuditLog {
  id        String   @id @default(cuid())
  userId    String
  action    String
  details   String?  @db.Text
  ipAddress String?
  userAgent String?
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, createdAt])
  @@index([action])
  @@index([createdAt])
  @@map("audit_logs")
}

model notifications {
  id             String                       @id
  title          String
  message        String                       @db.Text
  type           notifications_type           @default(INFO)
  isActive       Boolean                      @default(true)
  startDate      DateTime?
  endDate        DateTime?
  targetAudience notifications_targetAudience @default(ALL)
  position       notifications_position       @default(TOP)
  priority       Int                          @default(0)
  dismissible    Boolean                      @default(true)
  linkUrl        String?
  linkText       String?
  createdById    String
  createdAt      DateTime                     @default(now())
  updatedAt      DateTime
  deletedAt      DateTime?
  users          User                         @relation(fields: [createdById], references: [id])

  @@index([createdAt])
  @@index([createdById])
  @@index([isActive, startDate, endDate])
  @@index([priority])
  @@index([type])
}

enum Role {
  ADMIN
  STAFF
  USER
}

enum Status {
  DRAFT
  PUBLISHED
  ARCHIVED
}

enum notifications_type {
  INFO
  WARNING
  ERROR
  SUCCESS
}

enum notifications_targetAudience {
  ALL
  AUTHENTICATED
  GUEST
}

// Donation models for fundraising system
model Donation {
  id           String   @id @default(cuid())
  amount       Decimal  @db.Decimal(10, 2)
  currency     String   @default("USD")
  
  // Donor information (optional for anonymous donations)
  userId       String?
  donorName    String?   // For anonymous or guest donations
  donorEmail   String?   // For anonymous donations (optional)
  isAnonymous  Boolean   @default(false)
  
  // Payment information
  paymentMethod PaymentMethod @default(MANUAL)
  transactionId String?  @unique // External transaction ID
  kofiTransactionId String? // Ko-fi specific transaction ID
  
  // VietQR information (for bank transfers)
  bankCode     String?   // Bank identifier for VietQR
  qrCodeUrl    String?   // Generated VietQR URL
  transferNote String?   // Bank transfer note/reference
  
  // Status
  status       DonationStatus @default(PENDING)
  
  // Message (optional)
  message      String?   @db.Text
  isMessagePublic Boolean @default(true)
  
  // Metadata
  ipAddress    String?
  userAgent    String?
  
  // Timestamps
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  completedAt  DateTime?
  
  // Relations
  user         User?    @relation(fields: [userId], references: [id], onDelete: SetNull)
  goal         DonationGoal? @relation(fields: [goalId], references: [id], onDelete: SetNull)
  goalId       String?
  
  @@index([userId])
  @@index([goalId])
  @@index([status])
  @@index([paymentMethod])
  @@index([createdAt])
  @@index([isAnonymous])
  @@index([kofiTransactionId])
  @@map("donations")
}

model DonationGoal {
  id           String   @id @default(cuid())
  title        String
  description  String?  @db.Text
  targetAmount Decimal  @db.Decimal(10, 2)
  currentAmount Decimal @default(0) @db.Decimal(10, 2)
  currency     String   @default("USD")
  
  // Goal settings
  isActive     Boolean  @default(true)
  isVisible    Boolean  @default(true)
  priority     Int      @default(0) // Higher priority goals show first
  
  // Timeframe
  startDate    DateTime @default(now())
  endDate      DateTime?
  
  // Display settings
  showProgress Boolean  @default(true)
  showAmount   Boolean  @default(true)
  showDonors   Boolean  @default(true)
  
  // Metadata
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  createdBy    String
  
  // Relations
  creator      User     @relation(fields: [createdBy], references: [id])
  donations    Donation[]
  
  @@index([isActive, isVisible])
  @@index([priority])
  @@index([startDate, endDate])
  @@map("donation_goals")
}

enum DonationStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
  CANCELLED
}

enum PaymentMethod {
  KOFI
  BANK_TRANSFER
  MANUAL
}

enum notifications_position {
  TOP
  BOTTOM
}
